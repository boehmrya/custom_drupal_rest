<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;

function article_block_get_content() {
  $nids = article_block_query();
  $nodes = Node::loadMultiple($nids);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $output_list = array();
  foreach ($nodes as $node) {
    $build = $view_builder->view($node, 'full');
    $node_output = \Drupal::service('renderer')->render($build);
    $output_list[] = $node_output;
  }
  return $output_list;
}

function article_block_query() {
  $content_types = array(
      'article',
      'video'
  );
  $state = \Drupal::request()->get('state');
  $query = \Drupal::entityQuery('node')
          ->condition('status', 1)
          ->condition('type', $content_types, 'IN')
          ->condition('field_states', 4);

  if ($state) {
    $and = $query->andConditionGroup()
            ->condition('field_states', $state);
    $query->condition($and);
  }

  $query->sort('created', 'DESC');
  $query->pager(3);
  $nids = $query->execute();
  return $nids;
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function custom_api_preprocess_node(&$variables) {
  //$chart_percentage = $variables['node']->get('field_chart_percentage')->getValue();
  //dpm($chart_percentage);
  //dpm($variables);
}

/**
 * Implements hook_form_alter().
 */
function custom_api_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'node_page_edit_form' || $form_id == 'node_page_form') {
    $form['field_image']['#states'] = [
      'visible' => [
          'select[name="field_page_type"]' => ['value' => 'image-page']
      ]
    ];

    $form['field_description']['#states'] = [
      'visible' => [
          'select[name="field_page_type"]' => ['value' => 'text-page']
      ]
    ];
   }
 }



 /**
 * Implements hook_field_widget_form_alter().
 */

function custom_api_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget'] instanceof \Drupal\text\Plugin\Field\FieldWidget\TextfieldWidget) {
    $element['#after_build'][] = '_allowed_formats_remove_textarea_help';
  }
}


/**
 * #after_build callback.
 */

function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {
  //dpm($form_element['format']);
  if (isset($form_element['format'])) {
    $form_element['format']['format']['#default_value'] = 'full_html';
    $form_element['format']['format']['#value'] = 'full_html';
    unset($form_element['format']['format']['#options']['basic_html']);
    //unset($form_element['format']['format']);
    $form_element['format']['format']['#access'] = FALSE;


    // All this stuff is needed to hide the help text.
    unset($form_element['format']['guidelines']);
    unset($form_element['format']['help']);
    unset($form_element['format']['#theme_wrappers']);
  }

  return $form_element;
}


/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom class to the field's class attribute
 * according to the field formatter settings.
 */
function custom_api_preprocess_field(&$variables) {
  if ($variables['element']['#field_type'] == 'image') {
    foreach($variables['items'] as $key => $item){
      $variables['items'][ $key ]['content']['#item_attributes']['class'][] = 'thumbnail';
    }
  }
}

/**
* Implements hook_mail().
*/
function custom_api_mail($key, &$message, $params) {
 $options = array(
   'langcode' => $message['langcode'],
 );

 switch ($key) {
   case 'create_article':
     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = t('Article created: @title', array('@title' => $params['node_title']), $options);
     $message['body'][] = $params['message'];
     break;
 }
}


/**
* Implements hook_entity_insert().
*/
function custom_api_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

    // exit if not an article
   if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'article')) {
     return;
   }

   $author_email = $entity->getOwner()->getEmail();

   $mailManager = \Drupal::service('plugin.manager.mail');
   $module = 'custom_api';
   $key = 'create_article';
   $to = $author_email;
   $params['message'] = $entity->get('body')->value;
   $params['node_title'] = $entity->label();
   $langcode = \Drupal::currentUser()->getPreferredLangcode();
   $send = true;

   $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
   if ($result['result'] !== true) {
     drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
   }
   else {
     drupal_set_message(t('Your message has been sent.'));
   }

}
