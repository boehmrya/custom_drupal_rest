<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;

function article_block_get_content() {
  $nids = article_block_query();
  $nodes = Node::loadMultiple($nids);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $output_list = array();
  foreach ($nodes as $node) {
    $build = $view_builder->view($node, 'full');
    $node_output = \Drupal::service('renderer')->render($build);
    $output_list[] = $node_output;
  }
  return $output_list;
}

function article_block_query() {
  $content_types = array(
      'article',
      'video'
  );
  $state = \Drupal::request()->get('state');
  $query = \Drupal::entityQuery('node')
          ->condition('status', 1)
          ->condition('type', $content_types, 'IN')
          ->condition('field_states', 4);

  if ($state) {
    $and = $query->andConditionGroup()
            ->condition('field_states', $state);
    $query->condition($and);
  }

  $query->sort('created', 'DESC');
  $query->pager(3);
  $nids = $query->execute();
  return $nids;
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function custom_api_preprocess_node(&$variables) {
  //$chart_percentage = $variables['node']->get('field_chart_percentage')->getValue();
  //dpm($chart_percentage);
  //dpm($variables);
}

/**
 * Implements hook_form_alter().
 */
function custom_api_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'node_page_edit_form' || $form_id == 'node_page_form') {
    $form['field_image']['#states'] = [
      'visible' => [
          'select[name="field_page_type"]' => ['value' => 'image-page']
      ]
    ];

    $form['field_description']['#states'] = [
      'visible' => [
          'select[name="field_page_type"]' => ['value' => 'text-page']
      ]
    ];
   }
 }



 /**
 * Implements hook_field_widget_form_alter().
 */

function custom_api_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget'] instanceof \Drupal\text\Plugin\Field\FieldWidget\TextfieldWidget) {
    $element['#after_build'][] = '_allowed_formats_remove_textarea_help';
  }
}


/**
 * #after_build callback.
 */

function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {
  //dpm($form_element['format']);
  if (isset($form_element['format'])) {
    $form_element['format']['format']['#default_value'] = 'full_html';
    $form_element['format']['format']['#value'] = 'full_html';
    unset($form_element['format']['format']['#options']['basic_html']);
    //unset($form_element['format']['format']);
    $form_element['format']['format']['#access'] = FALSE;


    // All this stuff is needed to hide the help text.
    unset($form_element['format']['guidelines']);
    unset($form_element['format']['help']);
    unset($form_element['format']['#theme_wrappers']);
  }

  return $form_element;
}


/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom class to the field's class attribute
 * according to the field formatter settings.
 */
function custom_api_preprocess_field(&$variables) {
  if ($variables['element']['#field_type'] == 'image') {
    foreach($variables['items'] as $key => $item){
      $variables['items'][ $key ]['content']['#item_attributes']['class'][] = 'thumbnail';
    }
  }
}

/**
* Implements hook_mail().
*/
function custom_api_mail($key, &$message, $params) {
 $options = array(
   'langcode' => $message['langcode'],
 );

 switch ($key) {
   case 'create_article':
     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = t('Article created: @title', array('@title' => $params['node_title']), $options);
     $message['body'][] = $params['message'];
     break;
 }
}


function send_node_notification($key, $email, $entity, $node_type, $message) {
  if (($entity->getEntityTypeId() == 'node') && ($entity->bundle() == $node_type)) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'custom_api';
    $to = $email;
    $params['message'] = $message;
    $params['node_title'] = $entity->label();
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== true) {
      drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
    }
    else {
      drupal_set_message(t('Your message has been sent.'));
    }
  }
}


/**
* Implements hook_entity_insert().
*/
function custom_api_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
    $key = 'create_article';
    $author_email = $entity->getOwner()->getEmail();
    $node_type = 'article';
    $message = 'new node created ' . $entity->label();
    send_node_notification($key, $author_email, $entity, $node_type, $message);
}


/**
* Implements hook_entity_type_presave().
*/
function custom_api_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $values_equal = true; // flag to determine whether field values are equal

  if ($entity->original == null) {
    return;
  }

  $entity_fields = $entity->getFields();
  $original_fields = $entity->original->getFields();

  // build array of fields, body, and title on new object
  $updated_fields = [];
  foreach ($entity_fields as $key => $value) {
    // get all added fields, and the body and title
    if ((strpos($key, 'field') !== false) || $key == 'body' || $key == 'title') {
      $updated_fields[$key] = $value;
    }
  }

  foreach ($updated_fields as $updated_fields_key => $updated_field) {

    // get corresponding original field value
    $original_field = $original_fields[$updated_fields_key];
    $original_field_value = $original_field->getValue();
    $updated_field_value = $updated_field->getValue();

    if (count($original_field_value) !== count($updated_field_value)) {
      $values_equal = false;
      break;
    }

    foreach ($original_field_value as $original_key => $original_value_array) {


      if (array_key_exists('uri', $original_value_array) && array_key_exists('title', $original_value_array)) {
        $original_uri_value = $original_value_array['uri']; // direct values
        $original_title_value = $original_value_array['title'];
        $updated_uri_value = $updated_field_value[$original_key]['uri'];
        $updated_title_value = $updated_field_value[$original_key]['title'];

        if (($original_uri_value !== $updated_uri_value) || ($original_title_value !== $updated_title_value)) {
          $values_equal = false;
          break;
        }
      }
      elseif (array_key_exists('value', $original_value_array)) {
        $original_value_value = $original_value_array['value']; // direct values
        $updated_value_value = $updated_field_value[$original_key]['value'];

        if ($original_value_value !== $updated_value_value) {
          $values_equal = false;
          break;
        }
      }
      elseif (array_key_exists('target_id', $original_value_array)) {
        $original_ref_value = $original_value_array['target_id']; // direct values
        $updated_ref_value = $updated_field_value[$original_key]['target_id'];

        if ($original_ref_value !== $updated_ref_value) {
          $values_equal = false;
          break;
        }
      }

      if ($values_equal == false) {
        break;
      }
    }

    if ($values_equal == false) {
      break;
    }
  }

  if ($values_equal != true) {
    $key = 'create_article';
    $author_email = $entity->getOwner()->getEmail();
    $node_type = 'article';
    $message = 'Node ' . $entity->label() . '(' . $entity->id() . ') has changed ';
    send_node_notification($key, $author_email, $entity, $node_type, $message);
  }
  else {
    $log_message = 'article has not changed';
    \Drupal::logger('custom_api')->notice($log_message);
  }
}


function exclude_current_article_block_content() {
  $nids = exclude_current_article_query();
  $nodes = Node::loadMultiple($nids);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $output_list = array();
  foreach ($nodes as $node) {
    $build = $view_builder->view($node, 'full');
    $node_output = \Drupal::service('renderer')->render($build);
    $output_list[] = $node_output;
  }
  return $output_list;
}


function exclude_current_article_query() {
  $current_node = \Drupal::routeMatch()->getParameter('node');
  $current_nid = $current_node->id();
  $query = \Drupal::entityQuery('node')
          ->condition('status', 1)
          ->condition('type', 'article')
          ->condition('nid', $current_nid, '<>');

  $query->sort('created', 'DESC');
  $nids = $query->execute();
  return $nids;
}


function get_node_content($bundle, $view_mode) {
  // query
  $current_node = \Drupal::routeMatch()->getParameter('node');
  $current_nid = $current_node->id();
  $query = \Drupal::entityQuery('node')
          ->condition('status', 1)
          ->condition('type', $bundle);
  $query->sort('created', 'DESC');
  $nids = $query->execute();

  // build nodes
  $nodes = Node::loadMultiple($nids);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $output_list = array();
  foreach ($nodes as $node) {
    $build = $view_builder->view($node, $view_mode);
    $node_output = \Drupal::service('renderer')->render($build);
    $output_list[] = $node_output;
  }
  return $output_list;
}
